// 迭代器遍历
use std::cmp::min;
use std::collections::HashSet;

impl Solution {
    pub fn num_different_integers(word: String) -> i32 {
        word.chars()
            .map(|w| if w.is_digit(10) { w } else { ' ' })
            .collect::<String>()
            .split(" ")
            .filter(|item| item != &"")
            .map(|item| {
                let mut i = 0;
                let mut bytes = item.as_bytes();
                while i < bytes.len() && bytes[i] == b'0' {
                    i += 1;
                }
                i = min(i, bytes.len() - 1);
                String::from_utf8(bytes[i..].to_vec()).unwrap()
            })
            .collect::<HashSet<String>>()
            .len() as i32
    }
}

// 双指针
use std::collections::HashSet;

impl Solution {
    pub fn num_different_integers(word: String) -> i32 {
        let mut set = HashSet::new();
        let mut i = 0;
        let word = word.chars().collect::<Vec<char>>();

        loop {
            while i < word.len() && !word[i].is_digit(10) {
                i += 1;
            }
            if i == word.len() {
                break;
            }
            let mut j = i;
            while j < word.len() && word[j].is_digit(10) {
                j += 1;
            }
            while i < j && word[i] == '0' {
                i += 1;
            }
            set.insert(&word[i..j]);
            i = j;
        }
        
        set.len() as i32
    }
}