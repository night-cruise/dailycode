// 动态规划
// 假设在第i列前面的正方形都被瓷砖覆盖，在第i列后面的正方形都没有被瓷砖覆盖。
// 那么第i列的正方形有四种被覆盖的情况：
//  * 一个正方形都没有被覆盖，记为状态0
//  * 只有上方的正方形被覆盖，记为状态1
//  * 只有下方的正方形被覆盖，记为状态2
//  * 上下两个正方形都被覆盖，记为状态3

// 设dp[i][s]表示平铺到第i列时，各个状态s对应的平铺方法数量。
// dp[i][0] = dp[i-1][3]
// dp[i][1] = dp[i-1][0] + dp[i-1][2]
// dp[i][2] = dp[i-1][0] + dp[i-1][1]
// dp[i][3] = dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3]
// dp[0][0] = 1, dp[0][1] = 0, dp[0][2] = 0, dp[0][3] = 1

class Solution:
    def numTilings(self, n: int) -> int:
        dp = [[0] * 4 for _ in range(n)]
        dp[0][0] = dp[0][3] = 1
        
        mode = 1e9 + 7
        for i in range(1, n):
            dp[i][0] = dp[i-1][3]
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % mode
            dp[i][2] = (dp[i-1][0] + dp[i-1][1]) % mode
            dp[i][3] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3]) % mode
        
        return int(dp[n-1][3])
            