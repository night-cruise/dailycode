// 最短路径
// 1. 建图，边权为 cnti + 1
// 2. 用 Dijkstra 算法计算出从0到各个点的最短路
// 3. 对每个点，如果它可以在 maxMoves 步内到达，计入答案
// 4. 对每条边 ui-vi，如果从 ui 出发还可以走 a 步，从 vi 出发还可以走 b 步，
//    那么这条边上可到达的节点数为 min(a + b, cnti)

use std::collections::BinaryHeap;
use std::cmp::{max, min};

impl Solution {
    pub fn reachable_nodes(edges: Vec<Vec<i32>>, max_moves: i32, n: i32) -> i32 {
        fn build_graph(edges: &[Vec<i32>], n: usize) -> Vec<Vec<(usize, i32)>> {
            let mut graph = vec![vec![]; n];
            for edge in edges {
                graph[edge[0] as usize].push((edge[1] as usize, edge[2] + 1));
                graph[edge[1] as usize].push((edge[0] as usize, edge[2] + 1));
            }
            graph
        }
        fn dijkstra(graph: &[Vec<(usize, i32)>], start: usize, max_moves: i32) -> Vec<i32> {
            let mut dist = vec![i32::MAX; graph.len()];
            let mut heap = BinaryHeap::new();
            
            dist[start] = 0;                            // 初始化源点
            heap.push((0, 0));
            
            while !heap.is_empty() {
                let (d, v) = match heap.pop() {
                    Some((d, v)) => (-d, v),
                    _ => unreachable!(),
                };
                if d > max_moves {
                    break;
                }
                for &(u, w) in &graph[v] {
                    if d + w < dist[u] {
                        dist[u] = d + w;
                        heap.push((-dist[u], u));
                    }
                }
            }
            dist
        }
        
        let graph = build_graph(&edges, n as usize);
        let dist = dijkstra(&graph, 0, max_moves);
        
        let mut ans = dist.iter().filter(|&&d| d <= max_moves).count() as i32;
        for edge in edges {
            let a = max(max_moves - dist[edge[0] as usize], 0);
            let b = max(max_moves - dist[edge[1] as usize], 0);
            ans += min(a + b, edge[2]);
        }
        ans
    }
}