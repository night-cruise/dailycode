// 和分解
// 假设 3^x + 3^y + 3^z... = n，题目要求 x != y != z。那么一定可以进行如下操作：
// 将等式两边不断除以3，直到 n 不是 3 的约数，此时一定有 3^0 + 3^a + 3^b = c，
// 把等式左边的 3^0 移到右边，那么就得到 3^a + 3^b = c-1，重复上述过程，直到 n=0 为止。

// 因此只需要判断 n 是否是 3 的约数，如果是则除以3，如果不是则减去 1，如果减去 1 之后
// 仍然不是 3 的约数，返回 false，如果是则重复上述过程，直到 n=0 返回 true。

impl Solution {
    pub fn check_powers_of_three(mut n: i32) -> bool {
        while n > 0 {
            if n % 3 == 0 {
                n /= 3;
            } else {
                n -= 1;
                if n % 3 != 0 {
                    return false;
                }
            }
        }
        true
    }
}