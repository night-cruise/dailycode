// 动态规划
// 四种分配操作都是 25 的倍数，因此可以将 n 除以 25，同时四种分配操作变为 (4, 0), (3, 1), (2, 2), (1, 3),
// 设 dp[i][j] 表示汤 A 和汤 B 分别剩下 i 和 j 份时所求的概率值。
// dp[i][j] = 1/4 * (dp[i-4][j], dp[i-3][j-1], dp[i-2][j-2], dp[i-1][j-3])。
// dp[i][0] = 0, dp[0][j] = 1, dp[0][0] = 0.5

// 在一次分配中，汤 A 平均会被分配的份数期望为 E(A) = (4 + 3 + 2 + 1) * 0.25 = 2.5，
// 汤 B 平均会被分配的份数期望为 E(B) = (0 + 1 + 2 + 3) * 0.25 = 1.5。
// 因此在 n 非常大的时候，汤 A 会有很大的概率比 B 先分配完，汤 A 被先取完的概率解决 1.
// 通过实际的计算，可以发现当 n >= 4475 时，所求概率大于 0.99999，误差小于 10 ^-5，
// 因此当 n >= 4475 时，只需要输出 1 作为答案即可。

impl Solution {
    pub fn soup_servings(n: i32) -> f64 {
        if n >= 4474 {
            return 1.0;
        }
        let n = (n as usize + 24) / 25;
        let mut dp = vec![vec![0.0; n + 1]; n + 1];

        dp[0][0] = 0.5;
        for j in 1..=n {
            dp[0][j] = 1.0;
        }
        for i in 1..=n {
            for j in 1..=n {
                dp[i][j] = 0.25
                    * (dp[if i > 4 { i - 4 } else { 0 }][j]
                        + dp[if i > 3 { i - 3 } else { 0 }][if j > 1 { j - 1 } else { 0 }]
                        + dp[if i > 2 { i - 2 } else { 0 }][if j > 2 { j - 2 } else { 0 }]
                        + dp[if i > 1 { i - 1 } else { 0 }][if j > 3 { j - 3 } else { 0 }]);
            }
        }

        dp[n][n]
    }
}


// 记忆化搜索
// 设 search(a, b) 表示汤 A 和汤 B 分别剩下 a 份和 b 份时所求的概率值.
// search(a, b) = 0.25 * (search(a - 4, b) + search(a - 3, b - 1) + search(a - 2, b - 2) + search(a - 1, b - 3))
// search(a, 0) = 0, search(0, b) = 1, search(0, 0) = 0.5

class Solution:
    def soupServings(self, n: int) -> float:
        if n >= 4475:
            return 1
        n = (n + 24) // 25

        @cache
        def search(a: int, b: int) -> float:
            if a == 0 and b == 0:
                return 0.5
            elif a == 0:
                return 1
            elif b == 0:
                return 0

            return 0.25 * (
                search(max(a - 4, 0), b)
                + search(max(a - 3, 0), max(b - 1, 0))
                + search(max(a - 2, 0), max(b - 2, 0))
                + search(max(a - 1, 0), max(b - 3, 0))
            )

        return search(n, n)
