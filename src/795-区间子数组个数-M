// 一次遍历
// 可将数组中的元素分为三类：
// （1）：小于left
// （2）：大于等于left，小于等于right
// （3）：大于right
// 则满足条件的子数组中不能存在元素（3）并且至少存在一个元素（2）。
// 遍历数组，以 i 作为当前子数组的右端点，那么只需要确定子数组的左端点即可，
// 使用 last2 表示上一个（2）出现的位置，last3 表示上一个（3）的位置，那么左端点
// 可以位于 (last3, last2] 之间，如果 last2 != -1, 则以 i 为右端点的子数组数目为 last2 - last3。
// 在遍历的过程中，如果 nums[i] =（2） => last2 = i，如果 nums[i] =（3） => last2 = -1, last3 = i。

class Solution:
    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        ans, last2, last3 = 0, -1, -1
        
        for i in range(len(nums)):
            if nums[i] >= left and nums[i] <= right:
                last2 = i
            elif nums[i] > right:
                last2, last3 = -1, i
            if last2 != -1:
                ans += last2 - last3
        
        return ans
        
        

// 计数（容斥原理）
// 上面的方法提到，我们需要计算的子数组中不能存在元素（3）并且至少存在一个元素（2），
// 可以利用容斥原理，计算出包含（1）或（2）的子数组的数目，然后减去只包含（1）的子数组的数目，即为所求。
// 包含（1）或（2）的子数组中的元素都小于等于right，只包含（1）的子数组中的元素都小于等于left-1

class Solution:
    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        def count(nums: List[int], higher: int) -> int:
            res, cur = 0, 0         # cur表示小于等于higher的连续元素的个数
            for num in nums:
                if num <= higher:
                    cur += 1
                else:
                    cur = 0
                res += cur
            return res
        
        return count(nums, right) - count(nums, left-1)