// 枚举（时间复杂度过高，无法通过）

class Solution:
    def sumSubseqWidths(self, nums: List[int]) -> int:
        ans, n, mode = 0, len(nums), 1e9 + 7
        for i in range(1, 2**n):
            cur = [num for j, num in enumerate(nums) if 1 << j & i]
            maxNum, minNum = max(cur), min(cur)
            if maxNum != minNum:
                ans = (ans + maxNum - minNum) % mode
        return int(ans)
        


        
// 数学
// 计算宽度时，只需要计算序列中最大元素与最小元素的差值，那么我们只需要关心数字的大小而非位置，
// 因此可以对nums数组进行排序。以nums[i]为例，以nums[i]为最大值的子序列一共有2^i个，
// 以nums[i]为最小值的子序列一共有2^(len - i - 1)个。那么针对nums[i]来说，它的宽度和即为：
// (2 ^ i - 2^(len - i - 1)) * nums[i]

class Solution:
    def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        ans, n, mode = 0, len(nums), 1e9 + 7
        
        p = [1]*n
        for i in range(1, len(p)):
            p[i] = p[i-1] * 2 % mode
            
        for i in range(n):
            ans = (ans + (p[i] - p[n- i- 1]) * nums[i]) % mode
    
        return int(ans)