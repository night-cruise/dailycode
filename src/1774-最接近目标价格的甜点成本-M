// 回溯
use std::cmp::min;

impl Solution {
    pub fn closest_cost(base_costs: Vec<i32>, topping_costs: Vec<i32>, target: i32) -> i32 {
        fn dfs(topping_costs: &[i32], i: usize, cur_cost: i32, ans: &mut i32, target: i32) {
            if cur_cost - target > (*ans - target).abs() {
                return;
            }
            if (cur_cost - target).abs() == (*ans - target).abs() {
                *ans = min(*ans, cur_cost);
            } else if (cur_cost - target).abs() < (*ans - target).abs() {
                *ans = cur_cost;
            }
            if i == topping_costs.len() {
                return;
            }
            dfs(
                topping_costs,
                i + 1,
                cur_cost + 2 * topping_costs[i],
                ans,
                target,
            );
            dfs(
                topping_costs,
                i + 1,
                cur_cost + topping_costs[i],
                ans,
                target,
            );
            dfs(topping_costs, i + 1, cur_cost, ans, target);
        }

        base_costs.into_iter().fold(i32::MAX, |mut acc, cost| {
            dfs(&topping_costs, 0, cost, &mut acc, target);
            acc
        })
    }
}